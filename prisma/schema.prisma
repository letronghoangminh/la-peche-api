datasource db {
  url      = env("DATABASE_URL")
  provider = "mysql"
}

generator client {
  provider = "prisma-client-js"
}

model user {
  id               Int       @id @default(autoincrement())
  username         String    @unique
  hashedPassword   String
  cluster          Int?
  isActivated      Boolean   @default(true)
  isDeleted        Boolean   @default(false)
  verifyAt         DateTime? @db.DateTime(0)
  premiumEndsAt    DateTime? @db.DateTime(0)
  createdAt        DateTime  @default(now()) @db.DateTime(0)
  updatedAt        DateTime  @default(now()) @updatedAt @db.DateTime(0)
  introShownFields Json
  lastOnline       DateTime? @db.DateTime(0)
  role             role      @default(USER)

  name        String
  gender      String
  status      String
  orientation String
  biographic  String?

  email       String  @unique
  yearOfBirth Int?
  bodyType    String?
  diet        String?
  drinks      String?
  drugs       String?
  education   String?
  ethnicity   String?
  height      Float?
  income      Float?
  job         String?
  location    String?
  offspring   String?
  pets        String?
  sign        String?
  smokes      String?
  speaks      String?

  notifications   notification[]
  coupons         coupon[]
  userImages      user_image[]
  reportsMade     report[]       @relation("reports_made")
  reportsReceived report[]       @relation("reports_received")
  likedBy         user[]         @relation("user_likes")
  liking          user[]         @relation("user_likes")
  staredBy        user[]         @relation("user_stars")
  staring         user[]         @relation("user_stars")
  firstMatch      match[]        @relation("first_user")
  secondMatch     match[]        @relation("second_user")

  @@index([username])
  @@index([email])
}

model match {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @default(now()) @updatedAt @db.DateTime(0)

  firstUsername String
  firstUser     user   @relation("first_user", fields: [firstUsername], references: [username], onDelete: Cascade, onUpdate: NoAction, map: "match_firstUsername_fk")

  secondUsername String
  secondUser     user   @relation("second_user", fields: [firstUsername], references: [username], onDelete: Cascade, onUpdate: NoAction, map: "match_secondUsername_fk")

  @@index([firstUsername], map: "match_firstUsername_fk")
  @@index([secondUsername], map: "match_secondUsername_fk")
}

model notification {
  id     Int                 @id @default(autoincrement())
  text   String
  status notification_status @default(UNREAD)

  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @default(now()) @updatedAt @db.DateTime(0)

  userId Int
  user   user @relation(references: [id], fields: [id], onDelete: Cascade, onUpdate: NoAction, map: "notification_userId_fk")

  @@index([userId], map: "notification_userId_fk")
}

model coupon {
  id              Int     @id @default(autoincrement())
  code            String  @unique
  discountPercent Float
  isUsed          Boolean @default(false)

  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @default(now()) @updatedAt @db.DateTime(0)

  userId Int
  user   user @relation(references: [id], fields: [id], onDelete: Cascade, onUpdate: NoAction, map: "coupon_userId_fk")

  @@index([userId], map: "coupon_userId_fk")
}

model user_image {
  id          Int     @id @default(autoincrement())
  url         String
  isThumbnail Boolean

  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @default(now()) @updatedAt @db.DateTime(0)

  userId Int
  user   user @relation(references: [id], fields: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_image_userId_fk")

  @@index([userId], map: "user_image_userId_fk")
}

model report {
  id       Int           @id @default(autoincrement())
  category String
  reason   String
  status   report_status @default(PENDING)

  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @default(now()) @updatedAt @db.DateTime(0)

  reporterName String
  reporter     user   @relation("reports_made", references: [username], fields: [reporterName], onDelete: Cascade, onUpdate: NoAction, map: "report_reporterName_fk")

  targetName String
  target     user   @relation("reports_received", references: [username], fields: [targetName], onDelete: Cascade, onUpdate: NoAction, map: "report_targetName_fk")

  @@index([reporterName], map: "report_reporterName_fk")
  @@index([targetName], map: "report_targetName_fk")
}

enum role {
  USER
  ADMIN
}

enum notification_status {
  READ
  UNREAD
  PINNED
}

enum report_status {
  PENDING
  PROCESSING
  RESOLVED
}
